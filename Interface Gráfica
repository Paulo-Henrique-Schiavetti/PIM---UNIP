import customtkinter as ctk
from tkinter import ttk, messagebox
import sqlite3


# banco de dados


def criar_banco():
    con = sqlite3.connect("cadastro.db")
    cursor = con.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS alunos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT,
            ra INTEGER,
            curso TEXT,
            senha TEXT
        )
    ''')
    con.commit()
    con.close()

def validar_login_aluno(ra, senha):
    con = sqlite3.connect('cadastro.db')
    cursor = con.cursor()
    cursor.execute('SELECT senha FROM alunos WHERE ra = ?', (ra,))
    aluno = cursor.fetchone()
    con.close()

    if aluno and aluno[0] == senha:
        return True
    else:
        return False


# interface gráfica

ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")

class SistemaEscolar(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Sistema Escolar")
        self.geometry("500x450")
        self.resizable(False, False)
        criar_banco()
        self.tela_inicial()

    # tela inicial
    def tela_inicial(self):
        self.limpar_tela()
        frame = ctk.CTkFrame(self, fg_color="white")
        frame.pack(expand=True, fill="both")

        titulo = ctk.CTkLabel(frame, text="Sistema de cadastro de alunos e turmas", 
                            font=ctk.CTkFont(size=16, weight="normal"), text_color="black")
        titulo.pack(pady=(40, 50))

        botoes_frame = ctk.CTkFrame(frame, fg_color="white")
        botoes_frame.pack()

        btn_aluno = ctk.CTkButton(botoes_frame, text="ÁREA DO ALUNO", command=self.tela_login_aluno,
                                width=220, height=40, corner_radius=8, fg_color="#1976D2", text_color="white")
        btn_aluno.pack(pady=10)

        btn_admin = ctk.CTkButton(botoes_frame, text="ÁREA DOS ADMINISTRADORES", command=self.tela_login_admin,
                                width=220, height=40, corner_radius=8, fg_color="#1976D2", text_color="white")
        btn_admin.pack(pady=10)

    # tela do login auno
    def tela_login_aluno(self):
        self.limpar_tela()
        frame = ctk.CTkFrame(self)
        frame.pack(expand=True, fill="both", padx=10, pady=10)

        ctk.CTkLabel(frame, text="ÁREA DO ALUNO", font=ctk.CTkFont(size=18, weight="normal")).pack(pady=(30, 10))
        ctk.CTkLabel(frame, text="Entre com o seu RA e senha:", font=ctk.CTkFont(size=14)).pack(pady=(0, 20))

        form = ctk.CTkFrame(frame, fg_color="transparent")
        form.pack()

        self.criar_campo(form, "RA:", 0)
        self.criar_campo(form, "Senha:", 1, senha=True)

        botoes_frame = ctk.CTkFrame(frame, fg_color="transparent")
        botoes_frame.pack(pady=20)
        
        ctk.CTkButton(botoes_frame, text="Entrar", command=self.login_aluno, width=120, height=35, fg_color="#1976D2").grid(row=0, column=0, padx=5)
        ctk.CTkButton(frame, text="Voltar", command=self.tela_inicial, width=100, height=35, fg_color="#555").pack()

    def login_aluno(self):
        ra = self.ra_entry.get().strip()
        senha = self.senha_entry.get().strip()

        if not ra or not senha:
            messagebox.showwarning("Aviso", "Preencha todos os campos!")
            return

        if validar_login_aluno(ra, senha):
            self.tela_aluno()
        else:
            messagebox.showerror("Erro", "RA ou senha inválidos!")

    # tela area do aluno
    def tela_aluno(self):
        self.limpar_tela()
        frame = ctk.CTkFrame(self)
        frame.pack(expand=True, fill="both", padx=10, pady=10)

        ctk.CTkLabel(frame, text="Área do Aluno", font=ctk.CTkFont(size=18, weight="normal")).pack(pady=10)
        ctk.CTkLabel(frame, text="(Funcionalidades em desenvolvimento)").pack(pady=10)
        ctk.CTkButton(frame, text="Voltar", command=self.tela_inicial, width=100, height=35, fg_color="#555").pack(pady=20)

    # login administrador
    def tela_login_admin(self):
        self.limpar_tela()
        frame = ctk.CTkFrame(self)
        frame.pack(expand=True, fill="both", padx=10, pady=10)

        ctk.CTkLabel(frame, text="Login Administrador", font=ctk.CTkFont(size=18, weight="normal")).pack(pady=10)

        form = ctk.CTkFrame(frame)
        form.pack(pady=10)

        self.criar_campo(form, "Login:", 0)
        self.criar_campo(form, "Senha:", 1, senha=True)

        botoes_frame = ctk.CTkFrame(frame, fg_color="transparent")
        botoes_frame.pack(pady=10)
        
        ctk.CTkButton(botoes_frame, text="Entrar", command=self.login_admin, width=120, height=35, fg_color="#1976D2").grid(row=0, column=0, padx=5)
        ctk.CTkButton(frame, text="Voltar", command=self.tela_inicial, width=100, height=35, fg_color="#555").pack(pady=10)

    def login_admin(self):
        if self.login_entry.get() == "admin" and self.senha_entry.get() == "1234":
            self.tela_admin_menu()
        else:
            messagebox.showerror("Erro", "Login ou senha inválidos!")

    # menu para administrar
    def tela_admin_menu(self):
        self.limpar_tela()
        frame = ctk.CTkFrame(self)
        frame.pack(expand=True, fill="both", padx=10, pady=10)

        # titulo
        ctk.CTkLabel(frame, text="ÁREA DOS ADMINISTRADORES", 
                    font=ctk.CTkFont(size=18, weight="bold")).pack(pady=(20, 30))

        # opções
        menu_frame = ctk.CTkFrame(frame, fg_color="transparent")
        menu_frame.pack(pady=10)

        # botão do menu com as funcionalidades
        botoes_menu = [
            "CADASTRAR ALUNO",
            "ACESSAR ALUNOS", 
            "CADASTRAR TURMA",
            "ACESSAR TURMAS"
        ]

        for texto in botoes_menu:
            btn = ctk.CTkButton(menu_frame, text=texto, command=lambda: None,
                              width=220, height=40, corner_radius=8, 
                              fg_color="#1976D2", text_color="white",
                              font=ctk.CTkFont(size=13))
            btn.pack(pady=8)

        # espaço do botão de sair
        ctk.CTkLabel(menu_frame, text="", height=15).pack()

        # botão de sair(caso queira mudar a cor so alterar o fg_color)
        ctk.CTkButton(menu_frame, text="SAIR", command=self.tela_inicial,
                     width=220, height=40, corner_radius=8,
                     fg_color="#D32F2F", text_color="white",
                     font=ctk.CTkFont(size=13, weight="normal")).pack(pady=5)

    # função limpar_tela e criar_campo 
    def limpar_tela(self):
        for widget in self.winfo_children():
            widget.destroy()

    def criar_campo(self, pai, texto, linha, senha=False):
        ctk.CTkLabel(pai, text=texto).grid(row=linha, column=0, padx=5, pady=5, sticky="e")
        entry = ctk.CTkEntry(pai, width=160, show="*" if senha else "")
        entry.grid(row=linha, column=1, padx=5, pady=5)
        
        if texto == "RA:":
            self.ra_entry = entry
        elif texto == "Senha:":
            self.senha_entry = entry
        elif texto == "Login:":
            self.login_entry = entry
            
        return entry

# execução
if __name__ == "__main__":
    app = SistemaEscolar()
    app.mainloop()
